{
    "analytics": [
        {
            "displayName": "Failed logon attempts",
            "severity": "Medium",
            "enabled": "true",
            "query": "\nlet startdate = 1d;\nlet threshold = 6;\n// Below pulls messages from syslog-authpriv logs where there was an authentication failure with an unknown user.\n// IP address of system attempting logon is also extracted from the SyslogMessage field. Some of these messages\n// are aggregated.\nlet authfail = Syslog     \n| where Facility == \"authpriv\"   // looks at authpriv messages\n| where TimeGenerated >= ago(startdate)\n| where SyslogMessage contains \"authentication failure\" and SyslogMessage contains \" uid=0\"\n| parse SyslogMessage with * \"rhost=\" ExternalIP\n| project TimeGenerated, Computer, ProcessName, HostIP, ExternalIP, ProcessID;  \n// Below pulls messages from syslog-authpriv logs that show each instance an unknown user tried to logon. \nlet userfail = Syslog \n| where Facility == \"authpriv\" \n| where TimeGenerated >= ago(startdate)\n| where SyslogMessage contains \"user unknown\"\n| project TimeGenerated, Computer, HostIP, ProcessID;\n// Join the two log messages above\nlet userauthfail = authfail | join (userfail) on Computer, HostIP, ProcessID\n| project TimeGenerated, Computer, HostIP, ExternalIP, ProcessID ;\n// Extract the EventTime of the first logon attempt\nlet firstfail = userauthfail\n| summarize arg_min(TimeGenerated, *) by Computer, ExternalIP\n| project Computer, ExternalIP, FirstLogonAttempt = TimeGenerated;\n// Extract the EventTime of the last logon attempt\nlet lastfail = userauthfail\n| summarize arg_max(TimeGenerated, *) by Computer, ExternalIP\n| project Computer, ExternalIP, LatestLogonAttempt = TimeGenerated;\n// Join first and last logon attempt data and calculate the time between them (AttemptPeriodLength).\nlet faildates = firstfail | join (lastfail) on Computer, ExternalIP\n| project ExternalIP, Computer, FirstLogonAttempt, LatestLogonAttempt, TimeBetweenLogonAttempts = LatestLogonAttempt - FirstLogonAttempt;\n// Count the number of failed logon attempts by External IP and internal machine\nlet totalfails = userauthfail\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), TotalLogonAttempts = count() by ExternalIP, Computer, HostIP\n| project StartTimeUtc, EndTimeUtc, ExternalIP, Computer, HostIP, TotalLogonAttempts;\n// Combine total attempts with timing data from above\nlet finalfails = totalfails | join (faildates) on Computer, ExternalIP\n| project StartTimeUtc, EndTimeUtc, SourceAddress = ExternalIP, DestinationHost = Computer, DestinationIP = HostIP, TotalLogonAttempts, FirstLogonAttempt, LatestLogonAttempt, TimeBetweenLogonAttempts\n| order by DestinationHost asc nulls last;\nfinalfails \n| where TotalLogonAttempts >= threshold\n| extend timestamp = StartTimeUtc, HostCustomEntity = DestinationHost, IPCustomEntity = DestinationIP\n",
            "queryFrequency": "1d",
            "queryPeriod": "1d",
            "triggerOperator": "gt",
            "triggerThreshold": "0",
            "suppressionDuration": "6H",
            "suppressionEnabled": "false"
        },
        {
            "displayName": "Squid proxy events related to mining pools",
            "severity": "Low",
            "enabled": "true",
            "query": "\nlet timeframe = 1d;\nSyslog\n| where TimeGenerated >= ago(timeframe)\n| where ProcessName contains \"squid\"\n| extend URL = extract(\"(([A-Z]+ [a-z]{4,5}:\\\\/\\\\/)|[A-Z]+ )([^ :]*)\",3,SyslogMessage), \n        SourceIP = extract(\"([0-9]+ )(([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3}))\",2,SyslogMessage), \n        Status = extract(\"(TCP_(([A-Z]+)(_[A-Z]+)*)|UDP_(([A-Z]+)(_[A-Z]+)*))\",1,SyslogMessage), \n        HTTP_Status_Code = extract(\"(TCP_(([A-Z]+)(_[A-Z]+)*)|UDP_(([A-Z]+)(_[A-Z]+)*))/([0-9]{3})\",8,SyslogMessage),\n        User = extract(\"(CONNECT |GET )([^ ]* )([^ ]+)\",3,SyslogMessage),\n        RemotePort = extract(\"(CONNECT |GET )([^ ]*)(:)([0-9]*)\",4,SyslogMessage),\n        Domain = extract(\"(([A-Z]+ [a-z]{4,5}:\\\\/\\\\/)|[A-Z]+ )([^ :\\\\/]*)\",3,SyslogMessage),\n        Bytes = toint(extract(\"([A-Z]+\\\\/[0-9]{3} )([0-9]+)\",2,SyslogMessage)),\n        contentType = extract(\"([a-z/]+$)\",1,SyslogMessage)\n| extend TLD = extract(\"\\\\.[a-z]*$\",0,Domain)\n| where HTTP_Status_Code == '200'\n| where Domain contains \".\"\n| where Domain has \"monerohash.com\"\nor Domain has \"do-dear.com\"\nor Domain has \"xmrminerpro.com\"\nor Domain has \"secumine.net\"\nor Domain has \"xmrpool.com\"\nor Domain has \"minexmr.org\"\nor Domain has \"hashanywhere.com\"\nor Domain has \"xmrget.com\"\nor Domain has \"mininglottery.eu\"\nor Domain has \"minergate.com\"\nor Domain has \"moriaxmr.com\"\nor Domain has \"multipooler.com\"\nor Domain has \"moneropools.com\"\nor Domain has \"xmrpool.eu\"\nor Domain has \"coolmining.club\"\nor Domain has \"supportxmr.com\"\nor Domain has \"minexmr.com\"\nor Domain has \"hashvault.pro\"\nor Domain has \"xmrpool.net\"\nor Domain has \"crypto-pool.fr\"\nor Domain has \"xmr.pt\"\nor Domain has \"miner.rocks\"\nor Domain has \"walpool.com\"\nor Domain has \"herominers.com\"\nor Domain has \"gntl.co.uk\"\nor Domain has \"semipool.com\"\nor Domain has \"coinfoundry.org\"\nor Domain has \"cryptoknight.cc\"\nor Domain has \"fairhash.org\"\nor Domain has \"baikalmine.com\"\nor Domain has \"tubepool.xyz\"\nor Domain has \"fairpool.xyz\"\nor Domain has \"asiapool.io\"\nor Domain has \"coinpoolit.webhop.me\"\nor Domain has \"nanopool.org\"\nor Domain has \"moneropool.com\"\nor Domain has \"miner.center\"\nor Domain has \"prohash.net\"\nor Domain has \"poolto.be\"\nor Domain has \"cryptoescrow.eu\"\nor Domain has \"monerominers.net\"\nor Domain has \"cryptonotepool.org\"\nor Domain has \"extrmepool.org\"\nor Domain has \"webcoin.me\"\nor Domain has \"kippo.eu\"\nor Domain has \"hashinvest.ws\"\nor Domain has \"monero.farm\"\nor Domain has \"supportxmr.com\"\nor Domain has \"xmrpool.eu\"\nor Domain has \"linux-repository-updates.com\"\nor Domain has \"1gh.com\"\nor Domain has \"dwarfpool.com\"\nor Domain has \"hash-to-coins.com\"\nor Domain has \"hashvault.pro\"\nor Domain has \"pool-proxy.com\"\nor Domain has \"hashfor.cash\"\nor Domain has \"fairpool.cloud\"\nor Domain has \"litecoinpool.org\"\nor Domain has \"mineshaft.ml\"\nor Domain has \"abcxyz.stream\"\nor Domain has \"moneropool.ru\"\nor Domain has \"cryptonotepool.org.uk\"\nor Domain has \"extremepool.org\"\nor Domain has \"extremehash.com\"\nor Domain has \"hashinvest.net\"\nor Domain has \"unipool.pro\"\nor Domain has \"crypto-pools.org\"\nor Domain has \"monero.net\"\nor Domain has \"backup-pool.com\"\nor Domain has \"mooo.com\"\nor Domain has \"freeyy.me\"\nor Domain has \"cryptonight.net\"\nor Domain has \"shscrypto.net\"\n| extend timestamp = TimeGenerated, URLCustomEntity = URL, IPCustomEntity = SourceIP\n",
            "queryFrequency": "1d",
            "queryPeriod": "1d",
            "triggerOperator": "gt",
            "triggerThreshold": "0",
            "suppressionDuration": "6H",
            "suppressionEnabled": "false"
        },
        {
            "displayName": "Squid proxy events for ToR proxies",
            "severity": "Low",
            "enabled": "true",
            "query": "\nlet timeframe = 1d;\nSyslog\n| where TimeGenerated >= ago(timeframe)\n| where ProcessName contains \"squid\"\n| extend URL = extract(\"(([A-Z]+ [a-z]{4,5}:\\\\/\\\\/)|[A-Z]+ )([^ :]*)\",3,SyslogMessage), \n        SourceIP = extract(\"([0-9]+ )(([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3}))\",2,SyslogMessage), \n        Status = extract(\"(TCP_(([A-Z]+)(_[A-Z]+)*)|UDP_(([A-Z]+)(_[A-Z]+)*))\",1,SyslogMessage), \n        HTTP_Status_Code = extract(\"(TCP_(([A-Z]+)(_[A-Z]+)*)|UDP_(([A-Z]+)(_[A-Z]+)*))/([0-9]{3})\",8,SyslogMessage),\n        User = extract(\"(CONNECT |GET )([^ ]* )([^ ]+)\",3,SyslogMessage),\n        RemotePort = extract(\"(CONNECT |GET )([^ ]*)(:)([0-9]*)\",4,SyslogMessage),\n        Domain = extract(\"(([A-Z]+ [a-z]{4,5}:\\\\/\\\\/)|[A-Z]+ )([^ :\\\\/]*)\",3,SyslogMessage),\n        Bytes = toint(extract(\"([A-Z]+\\\\/[0-9]{3} )([0-9]+)\",2,SyslogMessage)),\n        contentType = extract(\"([a-z/]+$)\",1,SyslogMessage)\n| extend TLD = extract(\"\\\\.[a-z]*$\",0,Domain)\n| where HTTP_Status_Code == \"200\"\n| where Domain contains \".\"\n| where Domain has \"tor2web.org\"\nor Domain has \"tor2web.com\"\nor Domain has \"torlink.co\"\nor Domain has \"onion.to\"\nor Domain has \"onion.ink\"\nor Domain has \"onion.cab\"\nor Domain has \"onion.nu\"\nor Domain has \"onion.link\"\nor Domain has \"onion.it\"\nor Domain has \"onion.city\"\nor Domain has \"onion.direct\"\nor Domain has \"onion.top\"\nor Domain has \"onion.casa\"\nor Domain has \"onion.plus\"\nor Domain has \"onion.rip\"\nor Domain has \"onion.dog\"\nor Domain has \"tor2web.fi\"\nor Domain has \"tor2web.blutmagie.de\"\nor Domain has \"onion.sh\"\nor Domain has \"onion.lu\"\nor Domain has \"onion.pet\"\nor Domain has \"t2w.pw\"\nor Domain has \"tor2web.ae.org\"\nor Domain has \"tor2web.io\"\nor Domain has \"tor2web.xyz\"\nor Domain has \"onion.lt\"\nor Domain has \"s1.tor-gateways.de\"\nor Domain has \"s2.tor-gateways.de\"\nor Domain has \"s3.tor-gateways.de\"\nor Domain has \"s4.tor-gateways.de\"\nor Domain has \"s5.tor-gateways.de\"\nor Domain has \"hiddenservice.net\"\n| extend timestamp = TimeGenerated, URLCustomEntity = URL, IPCustomEntity = SourceIP\n",
            "queryFrequency": "1d",
            "queryPeriod": "1d",
            "triggerOperator": "gt",
            "triggerThreshold": "0",
            "suppressionDuration": "6H",
            "suppressionEnabled": "false"
        },
        {
            "displayName": "SSH newly internet-exposed endpoints",
            "severity": "Medium",
            "enabled": "true",
            "query": "\nlet PrivateIPregex = @'^127\\.|^10\\.|^172\\.1[6-9]\\.|^172\\.2[0-9]\\.|^172\\.3[0-1]\\.|^192\\.168\\.'; \nlet ssh_logins = Syslog\n| where TimeGenerated >= ago(7d)\n| where Facility contains \"auth\" and ProcessName != \"sudo\"\n| where SyslogMessage has \"Accepted\"\n| extend SourceIP = extract(\"(([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.(([0-9]{1,3})))\",1,SyslogMessage) \n| where SourceIP != \"\" \n| extend ipType = iff(SourceIP matches regex PrivateIPregex,\"private\" ,\"public\" );\nssh_logins \n| summarize privatecount=countif(ipType==\"private\"), publiccount=countif(ipType==\"public\") by HostName, HostIP, bin(EventTime, 1d)\n| summarize \npublicIPLoginHistory  = make_list(pack('IPCount', publiccount,  'logon_time', EventTime)),\nprivateIPLoginHistory = make_list(pack('IPCount', privatecount, 'logon_time', EventTime)) by HostName, HostIP\n| mv-apply publicIPLoginHistory = publicIPLoginHistory on\n(\n    order by todatetime(publicIPLoginHistory['logon_time']) asc\n    | summarize publicIPLoginCountList=make_list(toint(publicIPLoginHistory['IPCount'])), publicAverage=avg(toint(publicIPLoginHistory['IPCount'])), publicStd=stdev(toint(publicIPLoginHistory['IPCount'])), maxPublicLoginCount=max(toint(publicIPLoginHistory['IPCount']))\n)\n| mv-apply privateIPLoginHistory = privateIPLoginHistory on\n(\n    order by todatetime(privateIPLoginHistory['logon_time']) asc\n    | summarize privateIPLoginCountList=make_list(toint(privateIPLoginHistory['IPCount'])), privateAverage=avg(toint(privateIPLoginHistory['IPCount'])), privateStd=stdev(toint(privateIPLoginHistory['IPCount']))\n)\n// Some logins from private IPs\n| where privateAverage > 0\n// There is a non-zero number of logins from public IPs\n| where publicAverage >0\n// Approximate probability of seeing login from a public IP is < 1%\n| extend probabilityPublic = publicAverage / (privateAverage + publicAverage)\n| where probabilityPublic < 0.01\n// Today has the highest number of logins from public IPs that we've seen in the last week\n| extend publicLoginCountToday = publicIPLoginCountList[-1]\n| where publicLoginCountToday >= maxPublicLoginCount\n| extend HostCustomEntity = HostName\n// Optionally retrieve the original raw data for those logins that we've identified as potentially suspect\n// | join kind=rightsemi (\n//   ssh_logins\n//  | where ipType == \"public\"\n//  ) on HostName",
            "queryFrequency": "1d",
            "queryPeriod": "7d",
            "triggerOperator": "gt",
            "triggerThreshold": "0",
            "suppressionDuration": "6H",
            "suppressionEnabled": "false"
        },
        {
            "displayName": "SSH Potential Brute Force",
            "severity": "Medium",
            "enabled": "true",
            "query": "\nlet timeframe = 1d;\nlet threshold = 15;\nSyslog\n| where TimeGenerated >= ago(timeframe)\n| where SyslogMessage contains \"Failed password for invalid user\"\n| where SyslogMessage contains \"ssh2\" \n| parse kind=relaxed SyslogMessage with * \"invalid user\" user \" from \" ip \" port\" port \" ssh2\"\n| project user, ip, port, SyslogMessage, EventTime\n| summarize count() by ip, bin(EventTime, 4h), user\n| where count_ > threshold\n| extend timestamp = EventTime, IPCustomEntity = ip, AccountCustomEntity = user",
            "queryFrequency": "1d",
            "queryPeriod": "1d",
            "triggerOperator": "gt",
            "triggerThreshold": "0",
            "suppressionDuration": "6H",
            "suppressionEnabled": "false"
        }
    ]
}